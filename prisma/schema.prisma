// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                Int          @id @default(autoincrement())
  name              String
  domain            String?
  subdomain         String?
  socialMedia       Json?
  facebookPageId    String?
  facebookPixel     String?
  googleAnalytics   String?
  whatsappNumber    String?
  email             String       @unique
  title             String?
  siteKeyWord       String?
  siteDescription   String?
  subscriptionPlanId Int?
  subscriptionPlan  SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  isActive          Boolean      @default(true)
  billingInformation Json?
  nextExpirationDate DateTime?
  disabledAccount   DateTime?   // soft delete, not actually deleted
  deletedAt         DateTime?   // soft delete, not actually deleted
  logoUrl           String?
  password          String
  Users             User[]
  primaryColor      String?
  secondaryColor    String?
  vehicles          Vehicle[]   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("tenants")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roles     Json
  tenantId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  Tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model SubscriptionPlan {
  id        Int      @id @default(autoincrement())
  name      String
  description String?
  tenants     Tenant[] 

  @@map("subscription_plans")
}

model Vehicle { 
  id          Int      @id @default(autoincrement())

  vehicleType String?
  vehicleBrand String?
  vehicleModel String?
  vehicleVersion String?
  vehicleRegistration DateTime?
  vehicleGearBox String?
  vehicleFuel String?
  vehicleSteering String?
  vehicleMotorPower String?
  vehicleDoors String?
  veicleColor String?
  vehicleCubiccms String?
  vehicleMileage String?
  vehicleOwner String?
  vehicleFeatures Json?
  motorCycleFeatures Json?
  vehicleFinancial Json?
  vehiclePrice Int?
  vehicleTitle String?
  title String?
  description String?
  status String? 
  tagId Int?

  zipCode     String?
  city        String?
  cityUrl     String?
  country     String?
  countryUrl  String?

  tenantId    Int     
  Tenant      Tenant  @relation(fields: [tenantId], references: [id])

  @@map("vehicles") 
}